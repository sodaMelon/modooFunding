package dao;

import java.io.InputStream;
import java.util.List;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import dto.Member;


public class MySqlMemberDao implements MemberDao{
	
	
	private static MySqlMemberDao instance = new MySqlMemberDao();
	private SqlSessionFactory sqlSessionFactory; //마이바티스가 있을때만 쓰는거임
	//팩토리패턴이란..뭔지..?
	private DataSource ds;
	public MySqlMemberDao() {
		try {
			InitialContext initctx = new InitialContext();
			Context ctx=(Context)initctx.lookup("java:/comp/env");
			ds = (DataSource)ctx.lookup("jdbc/oracle");
			
		}catch(NamingException e) {
			e.printStackTrace();
		}
	
	//ds = DBAction.getInstance().getDataSource();
		//세션팩토리에 대한 객체생성
		try {
			String resource="dao/mybatis-config.xml";
			InputStream inputStream = Resources.getResourceAsStream(resource);
			sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
		} catch (Exception e) {
	e.printStackTrace();
	}
	}
	
	public static MySqlMemberDao getInstance() {
		if(instance == null) instance = new MySqlMemberDao();
		return instance;
	}
	
	
	@Override
	public List<Member> selectList() throws Exception {
SqlSession sqlSession = sqlSessionFactory.openSession();
try {
	return sqlSession.selectList("dao.MemberDao.selectList");
} finally {
sqlSession.close();
}
		return null;
		   }
	

	@Override
	public int insert(Member member) throws Exception {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public int delete(int no) throws Exception {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public Member selectOne(int no) throws Exception {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int update(Member member) throws Exception {
		// TODO Auto-generated method stub
		return 0;
	}


	

}
